// <auto-generated />
using System;
using Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240509025947_initDB")]
    partial class initDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Models.LookupCurrency", b =>
                {
                    b.Property<int>("LookupCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupCurrencyId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<decimal>("LookupCurrencyConversionRateToUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LookupCurrencyCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupCurrencyId");

                    b.ToTable("LookupCurrency");

                    b.HasData(
                        new
                        {
                            LookupCurrencyId = 1,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3537),
                            LookupCurrencyConversionRateToUSD = 1.0m,
                            LookupCurrencyCurrencyCode = "USD",
                            Status = 1
                        },
                        new
                        {
                            LookupCurrencyId = 2,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3539),
                            LookupCurrencyConversionRateToUSD = 0.80m,
                            LookupCurrencyCurrencyCode = "GBP",
                            Status = 1
                        },
                        new
                        {
                            LookupCurrencyId = 3,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3540),
                            LookupCurrencyConversionRateToUSD = 0.93m,
                            LookupCurrencyCurrencyCode = "EUR",
                            Status = 1
                        },
                        new
                        {
                            LookupCurrencyId = 4,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3540),
                            LookupCurrencyConversionRateToUSD = 0.71m,
                            LookupCurrencyCurrencyCode = "JOD",
                            Status = 1
                        },
                        new
                        {
                            LookupCurrencyId = 5,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3541),
                            LookupCurrencyConversionRateToUSD = 155.53m,
                            LookupCurrencyCurrencyCode = "JPY",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Models.LookupFrame", b =>
                {
                    b.Property<int>("LookupFrameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupFrameId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<string>("LookupFrameDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupFrameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LookupFramePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LookupFrameStock")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupFrameId");

                    b.ToTable("LookupFrame");
                });

            modelBuilder.Entity("Core.Models.LookupLens", b =>
                {
                    b.Property<int>("LookupLensId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupLensId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<string>("LookupLensColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LookupLensDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LookupLensPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LookupLensStock")
                        .HasColumnType("int");

                    b.Property<int>("LookupLensTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LookupPrescriptionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupLensId");

                    b.HasIndex("LookupLensTypeId");

                    b.HasIndex("LookupPrescriptionTypeId");

                    b.ToTable("LookupLens");
                });

            modelBuilder.Entity("Core.Models.LookupLensType", b =>
                {
                    b.Property<int>("LookupLensTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupLensTypeId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<string>("LookupLensTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupLensTypeId");

                    b.ToTable("LookupLensType");

                    b.HasData(
                        new
                        {
                            LookupLensTypeId = 1,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3520),
                            LookupLensTypeName = "classic",
                            Status = 1
                        },
                        new
                        {
                            LookupLensTypeId = 2,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3522),
                            LookupLensTypeName = "blue_light",
                            Status = 1
                        },
                        new
                        {
                            LookupLensTypeId = 3,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3523),
                            LookupLensTypeName = "transition",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Models.LookupPrescriptionType", b =>
                {
                    b.Property<int>("LookupPrescriptionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LookupPrescriptionTypeId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<string>("LookupPrescriptionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LookupPrescriptionTypeId");

                    b.ToTable("LookupPrescriptionType");

                    b.HasData(
                        new
                        {
                            LookupPrescriptionTypeId = 1,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3420),
                            LookupPrescriptionTypeName = "fashion",
                            Status = 1
                        },
                        new
                        {
                            LookupPrescriptionTypeId = 2,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3432),
                            LookupPrescriptionTypeName = "single_vision",
                            Status = 1
                        },
                        new
                        {
                            LookupPrescriptionTypeId = 3,
                            CreateDate = new DateTime(2024, 5, 9, 5, 59, 46, 775, DateTimeKind.Local).AddTicks(3433),
                            LookupPrescriptionTypeName = "varifocal",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Core.Models.TransactionCart", b =>
                {
                    b.Property<int>("TransactionCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCartId"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditId")
                        .HasColumnType("int");

                    b.Property<int>("LookupCurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("LookupFrameId")
                        .HasColumnType("int");

                    b.Property<int>("LookupLensId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionCartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionCartQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TransactionCartUserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionCartId");

                    b.HasIndex("LookupCurrencyId");

                    b.HasIndex("LookupFrameId");

                    b.HasIndex("LookupLensId");

                    b.ToTable("TransactionCart");
                });

            modelBuilder.Entity("Entity.Auth.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Entity.Auth.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.LookupLens", b =>
                {
                    b.HasOne("Core.Models.LookupLensType", "LookupLensType")
                        .WithMany()
                        .HasForeignKey("LookupLensTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.LookupPrescriptionType", "LookupPrescriptionType")
                        .WithMany()
                        .HasForeignKey("LookupPrescriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupLensType");

                    b.Navigation("LookupPrescriptionType");
                });

            modelBuilder.Entity("Core.Models.TransactionCart", b =>
                {
                    b.HasOne("Core.Models.LookupCurrency", "LookupCurrency")
                        .WithMany()
                        .HasForeignKey("LookupCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.LookupFrame", "LookupFrame")
                        .WithMany()
                        .HasForeignKey("LookupFrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.LookupLens", "LookupLens")
                        .WithMany()
                        .HasForeignKey("LookupLensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupCurrency");

                    b.Navigation("LookupFrame");

                    b.Navigation("LookupLens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Entity.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Entity.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Entity.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Entity.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Entity.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
